//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\zach1\Desktop\School\classes\C#\ConsoleApplication3\ConsoleApplication3\css.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApplication3 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class cssParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, SIGN=5, OFFSET=6, GROUP=7, VAR=8, Variable=9, 
		HEX=10, WORD=11, ID=12, NUMBER=13, WHITESPACE=14;
	public const int
		RULE_expressions = 0, RULE_assignment = 1, RULE_expression = 2;
	public static readonly string[] ruleNames = {
		"expressions", "assignment", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'='", null, "'Offset'", "'Group'", "'Var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "SIGN", "OFFSET", "GROUP", "VAR", "Variable", 
		"HEX", "WORD", "ID", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "css.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public cssParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 6; expression();
				}
				}
				State = 9;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GROUP) | (1L << VAR) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OffsetContext : AssignmentContext {
		public ITerminalNode OFFSET() { return GetToken(cssParser.OFFSET, 0); }
		public ITerminalNode WORD() { return GetToken(cssParser.WORD, 0); }
		public ITerminalNode SIGN() { return GetToken(cssParser.SIGN, 0); }
		public ITerminalNode HEX() { return GetToken(cssParser.HEX, 0); }
		public OffsetContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterOffset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitOffset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommandContext : AssignmentContext {
		public ITerminalNode[] WORD() { return GetTokens(cssParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(cssParser.WORD, i);
		}
		public ITerminalNode[] Variable() { return GetTokens(cssParser.Variable); }
		public ITerminalNode Variable(int i) {
			return GetToken(cssParser.Variable, i);
		}
		public ITerminalNode[] HEX() { return GetTokens(cssParser.HEX); }
		public ITerminalNode HEX(int i) {
			return GetToken(cssParser.HEX, i);
		}
		public CommandContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_assignment);
		int _la;
		try {
			State = 24;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WORD:
				_localctx = new CommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 11; Match(WORD);
				State = 15;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Variable) | (1L << HEX) | (1L << WORD))) != 0)) {
					{
					{
					State = 12;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Variable) | (1L << HEX) | (1L << WORD))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					State = 17;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 18; Match(T__0);
				}
				break;
			case OFFSET:
				_localctx = new OffsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(OFFSET);
				State = 20; Match(WORD);
				State = 21; Match(SIGN);
				State = 22; Match(HEX);
				State = 23; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdassignContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(cssParser.ID, 0); }
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public IdassignContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterIdassign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitIdassign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdassign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarassignContext : ExpressionContext {
		public ITerminalNode VAR() { return GetToken(cssParser.VAR, 0); }
		public ITerminalNode Variable() { return GetToken(cssParser.Variable, 0); }
		public ITerminalNode WORD() { return GetToken(cssParser.WORD, 0); }
		public ITerminalNode HEX() { return GetToken(cssParser.HEX, 0); }
		public VarassignContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterVarassign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitVarassign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarassign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupassignContext : ExpressionContext {
		public ITerminalNode GROUP() { return GetToken(cssParser.GROUP, 0); }
		public ITerminalNode WORD() { return GetToken(cssParser.WORD, 0); }
		public ITerminalNode[] ID() { return GetTokens(cssParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(cssParser.ID, i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public GroupassignContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.EnterGroupassign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcssListener typedListener = listener as IcssListener;
			if (typedListener != null) typedListener.ExitGroupassign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcssVisitor<TResult> typedVisitor = visitor as IcssVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expression);
		int _la;
		try {
			State = 54;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GROUP:
				_localctx = new GroupassignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; Match(GROUP);
				State = 27; Match(WORD);
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 28; Match(ID);
					}
					}
					State = 31;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==ID );
				State = 33; Match(T__1);
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 34; assignment();
					}
					}
					State = 37;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OFFSET || _la==WORD );
				State = 39; Match(T__2);
				}
				break;
			case VAR:
				_localctx = new VarassignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; Match(VAR);
				State = 42; Match(Variable);
				State = 43; Match(T__3);
				State = 44;
				_la = _input.La(1);
				if ( !(_la==HEX || _la==WORD) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case ID:
				_localctx = new IdassignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; Match(ID);
				State = 46; Match(T__1);
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 47; assignment();
					}
					}
					State = 50;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==OFFSET || _la==WORD );
				State = 52; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x10;\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x3\x3\a\x3"+
		"\x10\n\x3\f\x3\xE\x3\x13\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"\x1B\n\x3\x3\x4\x3\x4\x3\x4\x6\x4 \n\x4\r\x4\xE\x4!\x3\x4\x3\x4\x6\x4"+
		"&\n\x4\r\x4\xE\x4\'\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x6\x4\x33\n\x4\r\x4\xE\x4\x34\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x4\x2"+
		"\x2\x2\x5\x2\x2\x4\x2\x6\x2\x2\x4\x3\x2\v\r\x3\x2\f\r?\x2\t\x3\x2\x2\x2"+
		"\x4\x1A\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\b\n\x5\x6\x4\x2\t\b\x3\x2\x2\x2"+
		"\n\v\x3\x2\x2\x2\v\t\x3\x2\x2\x2\v\f\x3\x2\x2\x2\f\x3\x3\x2\x2\x2\r\x11"+
		"\a\r\x2\x2\xE\x10\t\x2\x2\x2\xF\xE\x3\x2\x2\x2\x10\x13\x3\x2\x2\x2\x11"+
		"\xF\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12\x14\x3\x2\x2\x2\x13\x11\x3\x2"+
		"\x2\x2\x14\x1B\a\x3\x2\x2\x15\x16\a\b\x2\x2\x16\x17\a\r\x2\x2\x17\x18"+
		"\a\a\x2\x2\x18\x19\a\f\x2\x2\x19\x1B\a\x3\x2\x2\x1A\r\x3\x2\x2\x2\x1A"+
		"\x15\x3\x2\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1D\a\t\x2\x2\x1D\x1F\a\r\x2\x2"+
		"\x1E \a\xE\x2\x2\x1F\x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\""+
		"\x3\x2\x2\x2\"#\x3\x2\x2\x2#%\a\x4\x2\x2$&\x5\x4\x3\x2%$\x3\x2\x2\x2&"+
		"\'\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2\x2\x2)*\a\x5\x2\x2"+
		"*\x39\x3\x2\x2\x2+,\a\n\x2\x2,-\a\v\x2\x2-.\a\x6\x2\x2.\x39\t\x3\x2\x2"+
		"/\x30\a\xE\x2\x2\x30\x32\a\x4\x2\x2\x31\x33\x5\x4\x3\x2\x32\x31\x3\x2"+
		"\x2\x2\x33\x34\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35"+
		"\x36\x3\x2\x2\x2\x36\x37\a\x5\x2\x2\x37\x39\x3\x2\x2\x2\x38\x1C\x3\x2"+
		"\x2\x2\x38+\x3\x2\x2\x2\x38/\x3\x2\x2\x2\x39\a\x3\x2\x2\x2\t\v\x11\x1A"+
		"!\'\x34\x38";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApplication3
